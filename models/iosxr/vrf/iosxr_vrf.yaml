module: iosxr_vrf
short_description: Resource module to configure VRF definitions.
description:
  - This module provides declarative management of VRF definitions on Cisco IOS-XR devices. It allows playbooks to manage individual or the entire VRF collection. It also supports purging VRF definitions from the configuration that are not explicitly defined.
version_added: 1.0.0
author: Ruchi Pakhle (@Ruchip16)
notes:
  - Tested against Cisco IOS-XR Version 17.3 on CML.
  - This module works with connection C(network_cli). See L(the IOS-XR Platform Options,../network/user_guide/platform_iosxr.html)
  - For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`
  - For more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_.
options:
  vrfs:
    description:
      - The set of VRF definition objects to be configured on the remote IOS device.  Ths
        list entries can either be the VRF name or a hash of VRF definitions and attributes.  This
        argument is mutually exclusive with the C(name) argument.
    type: list
    elements: raw
  name:
    description:
      - The name of the VRF definition to be managed on the remote IOS device.  The
        VRF definition name is an ASCII string name used to uniquely identify the VRF.  This
        argument is mutually exclusive with the C(vrfs) argument
    type: str
  description:
    description:
      - Provides a short description of the VRF definition in the current active configuration.  The
        VRF definition value accepts alphanumeric characters used to provide additional
        information about the VRF.
    type: str
  address_family:
    description:
      - The list of address families with MDT parameters to be configured on the remote IOS device.
    type: list
    elements: dict
  rd:
    description:
      - The router-distinguisher value uniquely identifies the VRF to routing processes
        on the remote IOS system.  The RD value takes the form of C(A:B) where C(A)
        and C(B) are both numeric values.
    type: str
  interfaces:
    description:
      - Identifies the set of interfaces that should be configured in the VRF.  Interfaces
        must be routed interfaces in order to be placed into a VRF.
    type: list
    elements: str
  associated_interfaces:
    description:
      - This is a intent option and checks the operational state of the for given vrf
        C(name) for associated interfaces. If the value in the C(associated_interfaces)
        does not match with the operational state of vrf interfaces on device it will
        result in failure.
    type: list
    elements: str
  delay:
    description:
      - Time in seconds to wait before checking for the operational state on remote
        device.
    default: 10
    type: int
  purge:
    description:
      - Instructs the module to consider the VRF definition absolute.  It will remove
        any previously configured VRFs on the device.
    default: false
    type: bool
  state:
    description:
      - Configures the state of the VRF definition as it relates to the device operational
        configuration.  When set to I(present), the VRF should be configured in the
        device active configuration and when set to I(absent) the VRF should not be
        in the device active configuration
    default: present
    choices:
      - present
      - absent
    type: str
  route_both:
    description:
      - Adds an export and import list of extended route target communities to the VRF.
    type: list
    elements: str
  route_export:
    description:
      - Adds an export list of extended route target communities to the VRF.
    type: list
    elements: str
  route_import:
    description:
      - Adds an import list of extended route target communities to the VRF.
    type: list
    elements: str
  route_both_ipv4:
    description:
      - Adds an export and import list of extended route target communities in address-family
        configuration submode to the VRF.
    type: list
    elements: str
  route_export_ipv4:
    description:
      - Adds an export list of extended route target communities in address-family configuration
        submode to the VRF.
    type: list
    elements: str
  route_import_ipv4:
    description:
      - Adds an import list of extended route target communities in address-family configuration
        submode to the VRF.
    type: list
    elements: str
  route_both_ipv6:
    description:
      - Adds an export and import list of extended route target communities in address-family
        configuration submode to the VRF.
    type: list
    elements: str
  route_export_ipv6:
    description:
      - Adds an export list of extended route target communities in address-family configuration
        submode to the VRF.
    type: list
    elements: str
  route_import_ipv6:
    description:
      - Adds an import list of extended route target communities in address-family configuration
        submode to the VRF.
    type: list
    elements: str
